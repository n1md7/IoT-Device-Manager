openapi: 3.0.0
paths:
  /api/v1/devices:
    get:
      operationId: DevicesHttpController_getDevices
      summary: Get devices
      description: Get a list of devices
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                properties:
                  devices:
                    type: array
                    description: List of devices
                    items:
                      $ref: '#/components/schemas/Device'
                  count:
                    type: integer
                    description: Total number of devices
      tags: &ref_0
        - Devices
  /api/v1/devices/create:
    post:
      operationId: DevicesHttpController_softCreate
      summary: Create device
      description: Soft create a new device. If it exists, it will skip.
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeviceRequest'
      responses:
        '200':
          description: ''
      tags: *ref_0
  /api/v1/devices/update:
    put:
      operationId: DevicesHttpController_updateDevice
      summary: Update device
      description: Update a device
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDeviceRequest'
      responses:
        '202':
          description: Device updated
      tags: *ref_0
  /api/v1/devices/webhook/status/SWITCH:
    put:
      operationId: WebhookHttpController_updateSwitchDevice
      summary: Status report for SWITCH
      description: Provide device status update for SWITCH type
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SwitchStatusRequest'
      responses:
        '202':
          description: Device SWITCH status received
      tags: &ref_1
        - Devices
  /api/v1/devices/webhook/status/SENSOR:
    put:
      operationId: WebhookHttpController_updateSensorDevice
      summary: Status report for SENSOR
      description: Provide device status update for SENSOR type
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SensorStatusRequest'
      responses:
        '202':
          description: Device SENSOR reading received
      tags: *ref_1
  /api/v1/components:
    post:
      operationId: ComponentsController_create
      summary: Create component
      description: Create a new component
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateComponentRequest'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Component'
      tags: &ref_2
        - Components
    get:
      operationId: ComponentsController_findAll
      summary: Get components
      description: Get a list of components
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                properties:
                  components:
                    type: array
                    description: List of components
                    items:
                      $ref: '#/components/schemas/Component'
                  count:
                    type: integer
                    description: Total number of components
      tags: *ref_2
  /api/v1/components/{id}:
    get:
      operationId: ComponentsController_findOne
      summary: Get component
      description: Get a component by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Component'
        '404':
          description: Component not found
      tags: *ref_2
    patch:
      operationId: ComponentsController_update
      summary: Update component
      description: Update a component by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateComponentRequest'
      responses:
        '204':
          description: Component updated
      tags: *ref_2
    delete:
      operationId: ComponentsController_remove
      summary: Delete component
      description: Delete a component by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '204':
          description: Component deleted
      tags: *ref_2
  /api/v1/feed/updates:
    get:
      operationId: FeedController_updates
      summary: Get feed
      description: >-
        Get a dynamic real-time feed of system events. This endpoint is SSE
        enabled.
      parameters: []
      responses:
        '200':
          description: ''
      tags:
        - Feed
  /api/v1/systems/create:
    post:
      operationId: SystemsController_create
      summary: Create system
      description: Create a new system
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSystemRequest'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System'
        '400': &ref_3
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorSchema'
      tags: &ref_4
        - Systems
  /api/v1/systems/control:
    post:
      operationId: SystemsController_controlSystem
      summary: Control system
      description: Manually start or stop a system
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ControlSystemRequest'
      responses:
        '200':
          description: System control
        '400': *ref_3
        '409':
          description: System start failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorSchema'
      tags: *ref_4
  /api/v1/systems:
    get:
      operationId: SystemsController_findAll
      summary: Get all systems
      description: Get all systems with their components
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                properties:
                  systems:
                    type: array
                    description: List of systems
                    items:
                      $ref: '#/components/schemas/System'
                  count:
                    type: integer
                    description: Total number of systems
        '400': *ref_3
      tags: *ref_4
  /api/v1/systems/{id}:
    get:
      operationId: SystemsController_findById
      summary: Get system by id
      description: Get system by id with no components
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/System'
        '400': *ref_3
      tags: *ref_4
    patch:
      operationId: SystemsController_updateById
      summary: Update system by id
      description: Update system by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSystemRequest'
      responses:
        '200':
          description: ''
        '400': *ref_3
      tags: *ref_4
    delete:
      operationId: SystemsController_removeById
      summary: Delete system by id
      description: Delete system by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
        '400': *ref_3
      tags: *ref_4
  /api/v1/scheduler:
    post:
      operationId: SchedulerController_create
      summary: Create schedule
      description: Create a new schedule
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateScheduleRequest'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '404': &ref_5
          description: Schedule not found
      tags: &ref_6
        - Scheduler
    get:
      operationId: SchedulerController_findAll
      summary: Get all schedules
      description: Get a list of all schedules
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                properties:
                  systems:
                    type: array
                    description: List of schedules
                    items:
                      $ref: '#/components/schemas/Schedule'
                  count:
                    type: integer
                    description: Total number of schedules
        '404': *ref_5
      tags: *ref_6
  /api/v1/scheduler/{id}:
    get:
      operationId: SchedulerController_findById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '404': *ref_5
      tags: *ref_6
    patch:
      operationId: SchedulerController_updateById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateScheduleRequest'
      responses:
        '200':
          description: ''
        '404': *ref_5
      tags: *ref_6
    delete:
      operationId: SchedulerController_removeById
      summary: Delete schedule
      description: Delete a schedule by id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
        '404': *ref_5
      tags: *ref_6
info:
  title: Home Automation API
  description: Home Automation API for IoT devices
  version: 0.0.1
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
      name: JWT
      description: Enter JWT auth token
      in: header
  schemas:
    CreateDeviceRequest:
      type: object
      properties:
        code:
          type: string
          example: D0001
          description: The unique identifier of the device.
        type:
          type: string
          enum: &ref_7
            - SWITCH
            - SENSOR
          example: SWITCH
          description: >-
            The type of the device. This will be used to determine the
            configuration of the device
        name:
          type: string
          example: Timer
          description: The name of the device.
        description:
          type: string
          example: A timer device.
          description: The description of the device.
        version:
          type: string
          example: '1'
          examples: &ref_8
            - '1'
            - '2'
            - '3'
          description: The version of the device.
      required:
        - code
        - type
        - name
        - description
        - version
    UpdateDeviceRequest:
      type: object
      properties:
        code:
          type: string
          example: D0001
          description: The unique identifier of the device.
        type:
          type: string
          enum: *ref_7
          example: SWITCH
          description: >-
            The type of the device. This will be used to determine the
            configuration of the device
        name:
          type: string
          example: Timer
          description: The name of the device.
        description:
          type: string
          example: A timer device.
          description: The description of the device.
        version:
          type: string
          example: '1'
          examples: *ref_8
          description: The version of the device.
    SwitchStatusRequest:
      type: object
      properties:
        code:
          type: string
          example: D0001
          description: The unique identifier of the device.
        name:
          type: string
          example: Timer
          description: The name of the device.
        version:
          type: string
          example: '1'
          examples: &ref_9
            - '1'
            - '2'
            - '3'
          description: The version of the device.
        status:
          type: string
          enum:
            - 'ON'
            - 'OFF'
          example: 'ON'
          description: The status of the device.
        timeRemaining:
          type: number
          example: 60
          description: Time remaining for the device to turn off.
      required:
        - code
        - name
        - version
        - status
        - timeRemaining
    SensorStatusRequest:
      type: object
      properties:
        code:
          type: string
          example: D0001
          description: The unique identifier of the device.
        name:
          type: string
          example: Timer
          description: The name of the device.
        version:
          type: string
          example: '1'
          examples: *ref_9
          description: The version of the device.
        reading:
          type: number
          description: The reading value of the sensor.
          example: 1.234567
      required:
        - code
        - name
        - version
        - reading
    CreateComponentRequest:
      type: object
      properties:
        deviceCode:
          type: string
          description: The Device Code of the component.
          example: D0001
        systemId:
          type: number
          description: The System ID of the component type.
          example: 1
      required:
        - deviceCode
        - systemId
    UpdateComponentRequest:
      type: object
      properties:
        deviceCode:
          type: string
          description: The Device Code of the component.
          example: D0001
        systemId:
          type: number
          description: The System ID of the component type.
          example: 1
        inUse:
          type: boolean
          description: This flag is used to determine whether the component is in use.
          default: false
        shared:
          type: boolean
          description: >-
            This flag is used to determine whether the component is shared.
            Usually, this flag is used to mark the component as a sensor. The
            component that only emits/reports data but not receiving anything
            back.
          default: false
    CreateSystemRequest:
      type: object
      properties:
        name:
          type: string
          example: Watering System
          description: The name of the system.
        description:
          type: string
          example: A watering system. It waters plants.
          description: The description of the system.
      required:
        - name
        - description
    SystemTime:
      type: object
      properties:
        sec:
          type: number
          example: 15
          description: value of seconds. Only the seconds part of the time [0, 59]
        min:
          type: number
          example: 15
          description: value of minutes. Only the minutes part of the time [0, 99]
      required:
        - sec
        - min
    ControlSystemRequest:
      type: object
      properties:
        id:
          type: number
          example: 1
          description: System ID
        action:
          type: string
          enum:
            - 'ON'
            - 'OFF'
          example: 'ON'
          description: Action to perform
        duration:
          description: Time to run the system. Only required when action is START
          allOf:
            - $ref: '#/components/schemas/SystemTime'
      required:
        - id
        - action
    UpdateSystemRequest:
      type: object
      properties:
        name:
          type: string
          example: Watering System
          description: The name of the system.
        description:
          type: string
          example: A watering system. It waters plants.
          description: The description of the system.
    CreateScheduleRequest:
      type: object
      properties:
        systemId:
          type: number
          example: 1
          description: The unique identifier of the system.
        name:
          type: string
          example: Timer schedule
          description: The name of the schedule.
        startExpression:
          type: string
          example: 5 * * * * *
          description: The cron expression of the schedule to START.
        duration:
          example: &ref_10
            min: 10
            sec: 0
          description: Duration of the component to run.
          allOf:
            - $ref: '#/components/schemas/SystemTime'
      required:
        - systemId
        - name
        - startExpression
        - duration
    UpdateScheduleRequest:
      type: object
      properties:
        systemId:
          type: number
          example: 1
          description: The unique identifier of the system.
        name:
          type: string
          example: Timer schedule
          description: The name of the schedule.
        startExpression:
          type: string
          example: 5 * * * * *
          description: The cron expression of the schedule to START.
        duration:
          example: *ref_10
          description: Duration of the component to run.
          allOf:
            - $ref: '#/components/schemas/SystemTime'
    Component:
      type: object
      properties:
        id:
          type: number
          description: The unique identifier of the component.
        inUse:
          type: boolean
          description: >-
            This flag is used to determine whether the component can be used by
            multiple systems.
        shared:
          type: boolean
          description: 'This flag is used to determine whether the component is shared. '
        createdAt:
          format: date-time
          type: string
          example: '2021-01-01T00:00:00.000Z'
          description: The date(ISO 8601) when the component was created.
        updatedAt:
          format: date-time
          type: string
          example: '2021-01-01T00:00:00.000Z'
          description: The date(ISO 8601) when the component was last updated.
      required:
        - id
        - inUse
        - shared
        - createdAt
        - updatedAt
    Schedule:
      type: object
      properties:
        id:
          type: number
          example: 1
          description: The unique identifier of the schedule.
        name:
          type: string
          example: Timer
          description: The name of the schedule.
        startExpression:
          type: string
          example: 5 * * * * *
          description: The cron expression of the schedule to START.
        duration:
          example:
            min: 10
            sec: 0
          description: Duration how long the system has to run.
          allOf:
            - $ref: '#/components/schemas/SystemTime'
        system:
          type: array
          items:
            type: object
        createdAt:
          format: date-time
          type: string
          description: The date and time the system was created.
        updatedAt:
          format: date-time
          type: string
          description: The date and time the system was updated.
      required:
        - id
        - name
        - startExpression
        - duration
        - system
        - createdAt
        - updatedAt
    System:
      type: object
      properties:
        id:
          type: number
          example: 1
          description: The unique identifier of the system.
        name:
          type: string
          example: Timer
          description: The name of the system.
        description:
          type: string
          example: A timer system.
          description: The description of the system.
        components:
          type: array
          items:
            type: array
        schedules:
          type: array
          items:
            $ref: '#/components/schemas/Schedule'
        createdAt:
          format: date-time
          type: string
          description: The date and time the system was created.
        updatedAt:
          format: date-time
          type: string
          description: The date and time the system was updated.
      required:
        - id
        - name
        - description
        - components
        - schedules
        - createdAt
        - updatedAt
    Device:
      type: object
      properties:
        code:
          type: string
          example: D0001
          description: The unique identifier of the device.
        type:
          type: string
          enum:
            - SWITCH
            - SENSOR
          example: SWITCH
          description: >-
            The type of the device. This will be used to determine the
            configuration of the device
        name:
          type: string
          example: Timer
          description: The name of the device.
        description:
          type: string
          example: A timer device.
          description: The description of the device.
        version:
          type: string
          example: '1'
          description: The version of the device.
        components:
          type: array
          items:
            $ref: '#/components/schemas/Component'
        createdAt:
          format: date-time
          type: string
          example: '2021-01-01T00:00:00.000Z'
          description: The date(ISO 8601) when the device was registered.
        updatedAt:
          format: date-time
          type: string
          example: '2021-01-01T00:00:00.000Z'
          description: The date(ISO 8601) when the device was last updated.
      required:
        - code
        - type
        - name
        - description
        - version
        - components
        - createdAt
        - updatedAt
    HttpErrorSchema:
      type: object
      properties:
        statusCode:
          type: number
          example: '500'
          description: Error code
        message:
          type: string
          example: Internal Server Error
          description: Error message
        timestamp:
          type: string
          example: '2021-09-19T12:00:00.000Z'
          description: Timestamp
        path:
          type: string
          example: api/v1/systems
          description: Path
        details:
          type: string
          example: Error details
          description: Error details
      required:
        - statusCode
        - message
        - timestamp
        - path
        - details
